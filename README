Flags de base √† supporter :
	Flag	Signification

	-	Alignement √† gauche
	0	Padding avec des z√©ros
	.	Pr√©cision
	largeur minimale (5, 10, etc.)	Nombre minimal de caract√®res √† afficher

üéØ Flags suppl√©mentaires √† supporter :
	Flag	Signification
	#	Pr√©fixe (0x pour %x, 0 pour %o, etc.)
	+	Forcer un + devant les nombres positifs (%d, %i)
	' ' (espace)	Affiche un espace devant les positifs (si + n‚Äôest pas utilis√©)

Examples:
	1. minus (-) ‚Äî Alignement √† gauche

	printf("|%-10d|\n", 42);

	Affiche :

	|42        |

    	Le champ est de largeur 10, le nombre est align√© √† gauche, et les espaces viennent √† droite.

	2. zero (0) ‚Äî Padding par des z√©ros

	printf("|%010d|\n", 42);

	Affiche :

	|0000000042|

    	Le champ fait 10 caract√®res, et les espaces sont remplac√©s par des z√©ros √† gauche.
    	Attention : si pr√©cision est sp√©cifi√©e (.), ce flag est ignor√©.

	3. width ‚Äî Largeur minimale

	printf("|%5d|\n", 42);

	Affiche :

	|   42|

    	Largeur minimale 5, remplit avec des espaces √† gauche par d√©faut.

	4. dot + precision (.) ‚Äî Pr√©cision pour nombre ou cha√Æne

	printf("|%.5d|\n", 42);

	Affiche :

	|00042|

    	Pr√©cision indique nombre minimum de chiffres pour un entier, padding avec des z√©ros √† gauche.

	printf("|%.3s|\n", "abcdef");

	Affiche :

	|abc|

   	Pr√©cision limite la longueur affich√©e d‚Äôune cha√Æne.

	5. hash (#) ‚Äî Forme alternative (prefixe pour hex, octal...)

	printf("|%#x|\n", 255);

	Affiche :

	|0xff|

	printf("|%#o|\n", 10);

	Affiche :

	|012|

    	Le flag # ajoute un pr√©fixe 0x, 0X ou 0 suivant le format.

	6. plus (+) ‚Äî Forcer le signe +

	printf("|%+d|\n", 42);

	Affiche :

	|+42|

    	Affiche toujours un signe, m√™me pour les positifs.

	7. space ( ) ‚Äî Espace devant nombres positifs

	printf("|% d|\n", 42);

	Affiche :

	| 42|

    	Met un espace devant un nombre positif si pas de +.
    	Utile pour l‚Äôalignement avec des nombres n√©gatifs.











